// Code generated by entc, DO NOT EDIT.

package property

import (
	"fmt"
	"io"
	"strconv"
)

const (
	// Label holds the string label denoting the property type in the database.
	Label = "property"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDeleted holds the string denoting the deleted field in the database.
	FieldDeleted = "deleted"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the property in the database.
	Table = "properties"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "properties"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_properties"
)

// Columns holds all SQL columns for property fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldName,
	FieldDeleted,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "properties"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_properties",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// Type defines the type for the "type" enum field.
type Type string

// TypeApartment is the default value of the Type enum.
const DefaultType = TypeApartment

// Type values.
const (
	TypeHouse     Type = "house"
	TypeApartment Type = "apartment"
	TypePremises  Type = "premises"
	TypeOffice    Type = "office"
	TypeVehicle   Type = "vehicle"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeHouse, TypeApartment, TypePremises, TypeOffice, TypeVehicle:
		return nil
	default:
		return fmt.Errorf("property: invalid enum value for type field: %q", _type)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (_type Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(_type.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (_type *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*_type = Type(str)
	if err := TypeValidator(*_type); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
